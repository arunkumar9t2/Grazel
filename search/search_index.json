{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Grazel \u00b6 Grazel stands for Gradle to Bazel . It is a Gradle plugin that enables you to migrate Android projects to Bazel build system in an incremental and automated fashion. How it works \u00b6 It works by automatically generating Bazel scripts for given Android project based on your Gradle configuration. For simple projects, it should be able to migrate, fully build and launch the app with bazel mobile-install //<target-name> . In advanced cases, where entire project might not be migratable, it migrates part of the graph and sets up hybrid build where part of the graph can be built with Bazel and rest with Gradle. Components \u00b6 Gradle plugin A Kotlin Starlark DSL to generate Starlark code in a type-safe way. Grab Bazel Common - Custom rules to bridge the gap between Gradle/Bazel. Goals \u00b6 Reduce the overall migration effort for migration via automation. Setup hybrid build to establish early feedback loop on CI during migration. Minimal source changes to not impact feature delivery - supported by Grab Bazel Common . Gradle as source of truth until migration is complete. Getting Started \u00b6 Requirements \u00b6 Buildifier is installed and avaialble in the path. Mac Install via homebrew . brew install buildifier Linux Install via apt . sudo apt-get install nodejs npm npm i -g @bazel/buildifier Apply and run \u00b6 Grazel will be soon available on mavenCentral . Until then please clone the project and use Gradle composite builds to run locally. In settings.gradle : includeBuild ( \"<path to this repo>/grazel-gradle-plugin\" ) { dependencySubstitution { substitute module ( \"com.grab:grazel\" ) with project ( \":\" ) } } In build.gradle : buildscript { dependencies { classpath \"com.grab:grazel:0.1.0\" } } apply plugin: \"com.grab.grazel\" // Grazel configuration grazel { // DSL } Grazel registers migrateToBazel lifecycle task that can be used to generate Bazel build scripts. By default, it filters out modules based on a set of migration criteria and generates scripts only for support modules. For more advanced configuration options, see Configuration . License \u00b6 Copyright 2021 Grabtaxi Holdings PTE LTE (GRAB) Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#grazel","text":"Grazel stands for Gradle to Bazel . It is a Gradle plugin that enables you to migrate Android projects to Bazel build system in an incremental and automated fashion.","title":"Grazel"},{"location":"#how-it-works","text":"It works by automatically generating Bazel scripts for given Android project based on your Gradle configuration. For simple projects, it should be able to migrate, fully build and launch the app with bazel mobile-install //<target-name> . In advanced cases, where entire project might not be migratable, it migrates part of the graph and sets up hybrid build where part of the graph can be built with Bazel and rest with Gradle.","title":"How it works"},{"location":"#components","text":"Gradle plugin A Kotlin Starlark DSL to generate Starlark code in a type-safe way. Grab Bazel Common - Custom rules to bridge the gap between Gradle/Bazel.","title":"Components"},{"location":"#goals","text":"Reduce the overall migration effort for migration via automation. Setup hybrid build to establish early feedback loop on CI during migration. Minimal source changes to not impact feature delivery - supported by Grab Bazel Common . Gradle as source of truth until migration is complete.","title":"Goals"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#requirements","text":"Buildifier is installed and avaialble in the path. Mac Install via homebrew . brew install buildifier Linux Install via apt . sudo apt-get install nodejs npm npm i -g @bazel/buildifier","title":"Requirements"},{"location":"#apply-and-run","text":"Grazel will be soon available on mavenCentral . Until then please clone the project and use Gradle composite builds to run locally. In settings.gradle : includeBuild ( \"<path to this repo>/grazel-gradle-plugin\" ) { dependencySubstitution { substitute module ( \"com.grab:grazel\" ) with project ( \":\" ) } } In build.gradle : buildscript { dependencies { classpath \"com.grab:grazel:0.1.0\" } } apply plugin: \"com.grab.grazel\" // Grazel configuration grazel { // DSL } Grazel registers migrateToBazel lifecycle task that can be used to generate Bazel build scripts. By default, it filters out modules based on a set of migration criteria and generates scripts only for support modules. For more advanced configuration options, see Configuration .","title":"Apply and run"},{"location":"#license","text":"Copyright 2021 Grabtaxi Holdings PTE LTE (GRAB) Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"architecture/","text":"TBA","title":"Architecture"},{"location":"configuration/","text":"TBA","title":"Configuration"}]}